//==================================
//  Constants
//==================================
var CTE = {
    LOGIN   : "login",
    SIGNUP  : "signup",
    REFRESH : "refresh",
    MOVE    : "move",
    EXIT    : "exit"
};

//==================================
//  Functions
//==================================
var socketEvents = {
    connect     : function() { console.log("connect");  },
    timeout     : function() { console.log("timeout");  }, 
    drain       : function() { console.log("drain");    },
    error       : function(e) { console.log("error");    },
    close       : function(had_error) { console.log("close");    },
    end         : function(o) { console.log("end");      },
    data        : function (dataString) {
        console.log(" - [Socket] Received: " + dataString);

        var data, error = false;

        try {
            data = JSON.parse(String(dataString));
        } catch (e) {
            error = true;
            console.log(" - Invalid JSON,  " + e);
        }

        if(error) return;

        switch(data.type) {
            case CTE.LOGIN  : { serverFunctions.login(this, data); break; }
            case CTE.SIGNUP : { serverFunctions.signup(this, data); break; }
            case CTE.REFRESH: { serverFunctions.refresh(this, data); break; }
            case CTE.MOVE   : { serverFunctions.move(this, data); break; }
            case CTE.EXIT   : { serverFunctions.exit(this, data); break; }
            default: console.log(" - Invalid data type received: \"" + data.type + "\".");
        }
    }
};

var serverFunctions = {
    login: function(socket, data) {
        db.userExists(data.user, data.password, function(exists, id) {
            if(exists) {
                console.log(" - User successfully connected");
                socket.playerData.id = id;
                socket.playerData.user = data.user;

                sockets[id] = socket;
            } else {
                console.log(" - User not found.");
            }
            socket.write(JSON.stringify({ type: CTE.LOGIN, exists: exists }));
        });
    },
    signup: function(socket, data) {
        db.addNewUser(data.user, data.password, function(successful) {
            console.log(" - Added new entry on Database");
            socket.write(JSON.stringify({ type: CTE.SIGNUP, successful: successful}));
        });
    },
    refresh: function(socket, data) {
        var list = [];
        for (var id in sockets) {
            var skt = sockets[id];
            list.push({
                id: skt.playerData.id,
                name: skt.playerData.user,
                status: skt.playerData.status
            });
        }
        socket.write(JSON.stringify({type: CTE.REFRESH, data: list}));
    },
    move: function(socket, data) {
        console.log("moved to: (" + data.position0.x + ',' + data.position0.y + ") -> (" + data.position1.x + "," + data.position1.y + ")");
        socket.write(JSON.stringify({ position0: {x:0, y:0}, position1: {x:1, y:1 } }), "utf8");
    },
    exit: function(socket, data) {
        console.log("Exiting");
        socket.end();
        server.close();
    }
};

//==================================
//
//==================================
var net = require('net');
var db = require('./database.js');
var sockets = {};
var sessions = {};
var server = net.createServer(function(socket) {
    console.log(" - Connected to server : LOCAL_ADDRESS: " + socket.localAddress + ", REMOTE_ADDRESS:" + socket.remoteAddress);

    socket.status = 0;
    socket.playerData = {};

    socket.on("connect" , socketEvents.connect);
    socket.on("timeout" , socketEvents.timeout);
    socket.on("drain"   , socketEvents.drain  );
    socket.on("error"   , socketEvents.error  );
    socket.on("close"   , socketEvents.close  );
    socket.on("end"     , socketEvents.end    );
    socket.on("data"    , socketEvents.data   );
});

server.listen(9001, function() {
    var address = server.address();
    console.log(" - Server started : %j", address);
});
