var socketEvents = {
    connect     : function() { console.log("connect");  },
    timeout     : function() { console.log("timeout");  }, 
    drain       : function() { console.log("drain");    },
    error       : function(e) { console.log("error");    },
    close       : function(had_error) { console.log("close");    },
    end         : function(o) { console.log("end");      },
    data        : function (dataString) {
        console.log(" - Socket:[" + this.id + "] Received: " + dataString);

        var socket = sockets[this.id], data, error = false;

        try {
            data = JSON.parse(String(dataString));
        } catch (e) {
            error = true;
            console.log(" - Invalid JSON,  " + e);
        }

        if(error) return;

        switch(data.type) {
            case "startGame": { serverFunctions.startGame(socket, data); break; }
            case "exit": { serverFunctions.exit(socket, data); break; }
            case "move": { serverFunctions.move(socket, data); break; }
            default: console.log(" - Invalid data type received: \"" + data.type + "\".");
        }
    }
};
var serverFunctions = {
    findSession : function(socket, data) {

    },
    startGame   : function(socket, data) {
        console.log("start game");
    },
    move        : function(socket, data) {
        console.log("moved to: (" + data.position0.x + ',' + data.position0.y + ") -> (" + data.position1.x + "," + data.position1.y + ")");
        socket.write(JSON.stringify({ position0: {x:0, y:0}, position1: {x:1, y:1 } }), "utf8");
    },
    exit        : function(socket, data) {
        console.log("Exiting");
        socket.end();
        server.close();
    }
};

var net = require('net');
var db = require('./db.js');
var sockets = {};
var sessions = {};
var server = net.createServer(function(socket) {
    console.log(" - Connected to server : FD: " + socket.fd + ", LOCAL_ADDRESS: " + socket.localAddress + ", REMOTE_ADDRESS:" + socket.remoteAddress);

    socket.id = "wtf";
    socket.playerData = {};
    sockets[socket.id] = socket;

    socket.on("connect" , socketEvents.connect);
    socket.on("timeout" , socketEvents.timeout);
    socket.on("drain"   , socketEvents.drain  );
    socket.on("error"   , socketEvents.error  );
    socket.on("close"   , socketEvents.close  );
    socket.on("end"     , socketEvents.end    );
    socket.on("data"    , socketEvents.data   );
});

server.listen(9001, function() {
    var address = server.address();
    console.log(" - Server started : %j", address);
});
